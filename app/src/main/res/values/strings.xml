<resources>
    <string name="app_name">Docker Path</string>
    <string name="login">Welcome to Login</string>
    <string name="other">Other Ways to Connect</string>
    <string name="Docker">Docker Logo</string>
    <string name="welcome">Let\'s get you in</string>
    <string name="email">E-mail</string>
    <string name="password">Password</string>
    <string name="newmember"><u>Hey ! I\'m new here.</u></string>
    <string name="oldmember"><u>I have an account</u></string>
    <string name="descrip">‚Ä¢ Windows 10 64-bit: Pro, Enterprise, or Education \n‚Ä¢ 4GB system RAM \n‚Ä¢ Internet</string>
    <string name="installe">‚úî First go to download site : <b>https://dockr.ly/2TwIxC7</b> \n\n‚úî Double click to execute Docker Desktop Installer.exe\n\n ‚úîEnsure the Enable Hyper-V Windows Features option is selected on the Configuration page.\n\n‚úî Follow the instructions on the installation wizard to authorize the installer and proceed with the install.</string>
    <string name="descripM">‚Ä¢ Mac hardware must be a 2010 or a newer model \n‚Ä¢ macOS must be version 10.13 or newer. \n‚Ä¢ 4GB system RAM \n‚Ä¢ Internet</string>
    <string name="installeM">‚úî First go to download site : https://dockr.ly/2X9MH3A \n\n‚úî Double-click Docker.dmg to open the installer\n\n ‚úîDrag the Docker icon to the Applications folder.\n\n‚úî Double-click Docker.app in the Applications folder to start Docker.</string>
    <string name="installex">‚ú∞ First you need to know that Docker has 2 editions Community Edition for developers and Enterprise Edition for Entreprise development.</string>
    <string name="installpart"> ‚ú∞ The docker Community package is called docker-ce and for Entreprise is docker-ee.\n\n ‚ú∞ The Docker new format is Year.Month.Version-ce or -ee\n\n üë©üèª‚Äçüîß Now let s Start Downloading. üë©üèª‚Äçüîß</string>
    <string name="descripU">‚Ä¢ 64-bit version of one of Ubuntu versions\n‚Ä¢ Internet</string>
    <string name="noteI">For old versions of Mac Os and Windows we get Docker Toolbox (Docker client, Docker machine, Docker compose, Kitematic"Desktop GUI", Docker QuickStart Terminal), what is mentionned above works only on new versions.</string>
    <string name="dockerDef">Docker is the most leading Open platforms for managing containers. Now Docker is made to solve developers problem "it works on my machine".
So Containers use virtualization architecture. And it is designed to run for a long as needed. </string>
    <string name="descripHow">Simple it packages all of your App dependencies, libraries, files, folders, OS, everything needed in order to make your app running, inside of a Container.\n\nThen execute it inside a Standard runtime environment, starting the App will be very fast, because there is no OS to boot or initialize, only App to launch.\n\nSo now developers can be assured that their App will run on any other machine.</string>
    <string name="arciTech">This picture above is shown that the Container is running directly on the host OS and, it wraps many different Apps in an isolated way.</string>
    <string name="dockerClient">Enables users to interact with Docker. it can be locally or remotely, Client can build, pull and run.</string>
    <string name="dockerHost">Provides a complete environment to execute and run applications. It includes Docker daemon, Images, Containers, Networks, and Storage.</string>
    <string name="dockerDaemon">A persistent background process that manages Docker images, containers, networks, and storage volumes. The Docker daemon constantly listens for Docker API requests and processes them.\n\nWhen you use a docker run command to start up a container, your docker client will translate that command into an HTTP API call, sends it to docker daemon. Docker daemon then evaluates the request, talks to underlying os and provisions your container.\n\n¬ª The Docker daemon pulls and builds container images as requested by the client.</string>
    <string name="dockerImage">An image is <b>builed</b> when you pass a Dockerfile in the command line, so what happens here is that we use Dockerfile that contains all of what needed to create an image, and then we put it inside a container. \n\nDone Now you can push the docker image to the public registry like DockerHub using the docker push command. After pushed you can access these images from anywhere using docker <b>pull command</b>.\n\n¬ª Container images can be shared across teams within an enterprise using a private container registry or shared with the world using a public registry like Docker Hub.</string>
    <string name="dockerContainers">A container is a runnable instance of an image. You can create, start, stop, move, or delete a container using the Docker API or CLI.\n\nYou can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.\n\nA container is volatile it means whenever you remove or kill the container then all of its data will be lost from it.\n\nIf you want to persist the container data use the docker storage concept.</string>
    <string name="dockerNetworking">Through the docker networking, we can communicate one container to other containers. By default, you get three different networks on the installation of Docker ‚Äì none, bridge, and host.\n\nThe none and host networks are part of the network stack in Docker.\n\nThe bridge network automatically creates a gateway and IP subnet and all containers that belong to this network can talk to each other via IP addressing.</string>
    <string name="dockerStorage">A container is volatile it means whenever you remove or kill the container then all of its data will be lost from it.\n\n If you want to persist the container data, use the docker storage concept. Used In terms of persistent storage DB, StatfulApp.</string>
    <string name="dockerRegistry">Docker-registries are services that provide locations from where you can store and download images.\n\nIn other words, a Docker registry contains repositories that host one or more Docker Images. Public Registries include Docker Hub and Docker Cloud and private Registries can also be used. You can also create your own private registry.</string>
    <string name="aboutImgs">An image is a template that can be turned into a container. \n\n ‚òù Docker image has a unique ID once created and it also includes a series of layers, each <b>Layer</b> is set of fileSystem changes. \n\n ‚úå Image contains all the data and meta-data needed to run the containers that are launched from image. \n\n ü§ù Docker image is <b>immutable</b>. <i>Read-Only</i>. </string>
    <string name="dockerBuild"> Build an image from the Dockerfile in the current directory and tag the image  </string>
    <string name="dockerCont"> ‚ôî Each container is created from a docker image. \n\n‚ôï The major difference between a container and an image is the top writable layer.\n\n‚ôñ When a container is started a writable layer is added to the top. \n\n‚ôó You can commit the changes made to a container and make a new image out of it.\n\n‚ôò You may have many running containers of the same image.\n\n‚ôô Each container is an isolated and secure application environment.  </string>
    <string name="ps"> ‚ôî An instance of an image is called a container. \n\n‚ôï The major difference between a container and an image is the top writable layer.\n\n‚ôñ When a container is started a writable layer is added to the top. \n\n‚ôó You can commit the changes made to a container and make a new image out of it.\n\n‚ôò You may have many running containers of the same image.\n\n‚ôô Each container is an isolated and secure application environment.</string>
    <string name="hubDef">Docker Hub is <b>SAAS</b> (Software As A Service) provided by Docker Company that holds public and private Docker images. \n\nYou can access Docker Hub from the link inside the Screenshot below </string>
    <string name="dockerPrivate">Is a  <b>Storage System</b> used to store the private images on a local machine. The registry server is a container provided by Docker. </string>
    <string name="privateAdvg">‚òù Securely deployed in your local envirnoment.\n\n‚úå Reduces latency for pushing and pulling imags, leading to a faster deployments. </string>
    <string name="dockerfile"><b> Docker</b> can build images automatically by reading the instructions from a Dockerfile.\n\nSo a <b>Dockerfile</b> is a text document that contains all the commands a user could call on the command line to assemble an image.\n\nUsing  <b>docker build</b> users can create an automated build that executes serval command-line instructions in succession.</string>
    <string name="dockerCompose">Is a <b>Docker Orchestration framework</b>  used for defining and running multi-container Apps with docker. \n\nCompose allows us to declare the links of serval containers in a single configuration file. \n\nInstead of having serval complex lengthy commands to execute in the right sequence. The configuration file named docker-compose.yml, which is human friendly data serialization language. \n\nBy using docker-compose.yml we define the relationships between services, networks and volumes.</string>
    <string name="dockerSwarm">Is a <b>Native clustering and orchestration tools</b>  for Docker\n\n<b>Docker Swarm</b> allows you to manage multiple Docker hosts combines into a single logical entity.\n\n <b>PS :</b> Before hte Docker 1.12V Docker swarm was a seperate tool. Starting from Docker 1.12V it is build inside Docker Engine.</string>
    <string name="dockerMachine">Allows you to create Docker hosts on your Laptop : (Windows, Linux, Mac). Or any cloud providers (Aws, Azure,GCP) also on a VMWare and VirtualBox plateform.\n\nDocker Machine allows ou to start, stop and restart a managed host, upgrade or even configure the Docker Client.</string>

    <string name="title_activity_fullscreen">FullscreenActivity</string>
    <string name="dummy_button">Dummy Button</string>
    <string name="dummy_content">DUMMY\nCONTENT</string>


</resources>
